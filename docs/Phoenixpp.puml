@startuml
'https://plantuml.com/class-diagram
skinparam linetype polyline
skinparam linetype ortho
set separator ::
namespace roboime{

class ui::UIController #darkseagreen{
    -listener : UIListener
    -agents : Agent[]
    +initializeAgents()
    +loopAgents()
    +stopAgents()
}
class AgentFactory #lightskyblue{
    +createAgent()
}
together {
class messaging::Environment #burlywood{
}
class messaging::Fouls #burlywood{
}
class messaging::RobotsFeedback #burlywood{
}
class messaging::RobotsDecision #burlywood{
}
class messaging::RobotsPath #burlywood{
}
class messaging::RobotsCommands #burlywood{
}
class messaging::RobotsOutput #burlywood{
}
}
class messaging::MessagePublisher<T> #lightblue {
    -listeners : MessageListener[]
    +notifyListeners(T)
    +subscribe(MessageListener)
    +unsubscribe(MessageListener)
}


abstract Agent<T> #crimson{
    # fps : int
    # parametersManager : ParametersManager
    # publisher: MessagePublisher<T>
    +{abstract}initialize()
    +{abstract}execute()
    +{abstract}stop()
}
abstract messaging::MessageListener #khaki{
    +update(message: Message)
    +{abstract}updateVisit(Environment)
    +{abstract}updateVisit(Fouls)
    +{abstract}updateVisit(RobotsFeedback)
    +{abstract}updateVisit(RobotsDecision)
    +{abstract}updateVisit(RobotsPath)
    +{abstract}updateVisit(RobotsCommands)
    +{abstract}updateVisit(RobotsOutput)
}

interface messaging::Message #khaki{
    +{abstract}accept(MessageListener)
}
'MessageListener -l[hidden] Message
'MessageListener -r[hidden] MessagePublisher
MessageListener -- Message #goldenrod
class messaging::MessageWrapper<T> #khaki{
    -message : T
    +accept(listener : MessageListener) override
    +getMessage() : T
}
MessagePublisher ..> MessageWrapper #darkblue

Message <|.d. MessageWrapper #goldenrod

namespace messaging {
note right of MessagePublisher::notifyListeners
    MessageWrapper<T> messageWrapper = new(message);
    for l in listeners{
        l.update(messageWrapper);
    }
end note

note left of MessageListener::update
    message.accept(this);
end note
note right of MessageWrapper::accept
    T message = getMessage();
    listener.updateVisit(message);
end note
}

together{
interface io::PacketReceiver #orchid{
}
interface io::PacketTransmitter #orchid{
}
interface io::ParametersManager #orchid{
}

}
class io::SerialReceiver #orchid{
}
class io::UdpReceiver #orchid{
}
class io::ReplayLoader #orchid{
}
class io::ReplayRecorder #orchid{
}
class io::UdpTransmitter #orchid{
}
class io::SerialTransmitter #orchid{
}
class io::JsonParametersManager #orchid{
}
JsonParametersManager -u-|> ParametersManager #darkmagenta
Agent *-- ParametersManager #darkred

class vision::Vision<Environment> #darkseagreen{
    # publisher: MessagePublisher<Environment>
    # receiver : PacketReceiver
    # filter : Filter
    +execute() override
    +setFilter()
    +decodePacket()
}
Vision -d-> Environment #chocolate
class vision::SSLVision #darkseagreen{
    +execute() override
    +setHost()
    +setPort()
    +reconnect()
}
class vision::ReplayVision #darkseagreen{
    +execute() override
}
SSLVision -u-|> Vision #green
ReplayVision -u-|> Vision #green

class referee::Referee<Fouls> #darkseagreen{
    - publisher: MessagePublisher<Fouls>
    - receiver : PacketReceiver
    +execute() override
}
Referee -d-> Fouls #chocolate
class referee::SSLReferee #darkseagreen{
    +execute() override
}
class referee::ManualReferee #darkseagreen{
    +execute() override
}
SSLReferee -u-|> Referee #green
ManualReferee -u-|> Referee #green
class feedback::Feedback<RobotsFeedback> #darkseagreen{
    - receiver : PacketReceiver
    +execute() override
}
Referee -d-> Fouls #chocolate
class feedback::SerialFeedback #darkseagreen{
    +execute() override
}
class feedback::GrSimFeedback #darkseagreen{
    +execute() override
}
SerialFeedback -u-|> Feedback #green
GrSimFeedback -u-|> Feedback #green
class ai::DecisionMaker<RobotsDecision> #darkseagreen{
    #Environment
    #Fouls
    #RobotsFeedback
    +execute() override
    +updateVisit(Environment) override
    +updateVisit(Fouls) override
    +updateVisit(RobotsFeedback) override
}
DecisionMaker -d-> RobotsDecision #chocolate
class ai::STP #darkseagreen{
    +execute() override
}
class ai::ControllerTester #darkseagreen{
    +execute() override
}
STP -u-|> DecisionMaker #green
ControllerTester -u-|> DecisionMaker #green
class pathplanning::PathPlanner<RobotsPath> #darkseagreen{
    #Environment
    #RobotsDecision
    +execute() override
    +updateVisit(Environment) override
    +updateVisit(RobotsDecision) override
}
PathPlanner -d-> RobotsPath #chocolate
class pathplanning::RRT #darkseagreen{
    +execute() override
}
class pathplanning::LinePath #darkseagreen{
    +execute() override
}
RRT -u-|> PathPlanner #green
LinePath -u-|> PathPlanner #green
class navigation::Controller<RobotsCommands> #darkseagreen{
    #Environment
    #RobotsDecision
    #RobotsPath
    +execute() override
    +updateVisit(Environment) override
    +updateVisit(RobotsDecision) override
    +updateVisit(RobotsPath) override
}
Controller -d-> RobotsCommands #chocolate
class navigation::BangBangController #darkseagreen{
    +execute() override
}
class navigation::ManualController #darkseagreen{
    +execute() override
}
BangBangController -u-|> Controller #green
ManualController -u-|> Controller #green
class communication::Communicator<RobotsOutput> #darkseagreen{
    - RobotsCommands
    +execute() override
    +updateVisit(RobotsCommands) override
}
Communicator -d-> RobotsOutput #chocolate
class ui::UIListener #darkseagreen{
    -Environment
    -Fouls
    -RobotsFeedback
    -RobotsDecision
    -RobotsPath
    -RobotsCommands
    -RobotsOutput
    +updateVisit(Environment) override
    +updateVisit(Fouls) override
    +updateVisit(RobotsFeedback) override
    +updateVisit(RobotsDecision) override
    +updateVisit(RobotsPath) override
    +updateVisit(RobotsCommands) override
    +updateVisit(RobotsOutput) override
    +getEnvironment() : Environment
    +getFouls() : Fouls
    +getRobotsFeedback() : RobotsFeedback
    +getRobotsDecision() : RobotsDecision
    +getRobotsPath() : RobotsPath
    +getRobotsCommands() : RobotsCommands
    +getRobotsOutput() : RobotsOutput
}
UIController *-- UIListener #darkgreen
UIController *-- Agent #darkgreen

class vision::Filter #mediumturquoise{
    +{abstract}applyFilter(Environment) : Environment
}
Vision o-d- Filter #darkslategrey
class vision::KalmanFilter #mediumturquoise{
    +applyFilter(Environment) override: Environment
}
KalmanFilter -u-|> Filter #darkslategrey
Vision *-d- PacketReceiver #line:darkmagenta
Vision *-d- ReplayRecorder #line:darkmagenta
Referee *-d- PacketReceiver #line:darkmagenta
Feedback *-d- PacketReceiver #line:darkmagenta


Communicator *-- PacketTransmitter #line:darkmagenta

DecisionMaker o-- Environment #line:green
DecisionMaker o-- Fouls #line:green
DecisionMaker o-- RobotsFeedback #line:green
PathPlanner o-- Environment #line:green
PathPlanner o-- RobotsDecision #line:green
Controller o-- Environment #line:green
Controller o-- RobotsDecision #line:green
Controller o-- RobotsPath #line:green
Communicator o-- RobotsCommands #line:green
UIListener o-- Environment #line:green
UIListener o-- Fouls #line:green
UIListener o-- RobotsFeedback #line:green
UIListener o-- RobotsDecision #line:green
UIListener o-- RobotsPath #line:green
UIListener o-- RobotsCommands #line:green
UIListener o-- RobotsOutput #line:green

MessageListener <|-d- DecisionMaker #line:goldenrod
MessageListener <|-d- Controller #line:goldenrod
MessageListener <|-d- PathPlanner #line:goldenrod
MessageListener <|-d- Communicator #line:goldenrod
MessageListener <|-d- UIListener #line:goldenrod

MessageListener ..> Environment #maroon
MessageListener ..> Fouls #maroon
MessageListener ..> RobotsFeedback #maroon
MessageListener ..> RobotsDecision #maroon
MessageListener ..> RobotsPath #maroon
MessageListener ..> RobotsCommands #maroon
MessageListener ..> RobotsOutput #maroon


Agent <|-d- DecisionMaker #line:darkred
Agent <|-d- Controller #line:darkred
Agent <|-d- PathPlanner #line:darkred
Agent <|-d- Communicator #line:darkred
Agent <|-d- Vision #line:darkred
Agent <|-d- Referee #line:darkred
Agent <|-d- Feedback #line:darkred
Agent *-r- MessagePublisher #line:darkred

PacketReceiver <|.. SerialReceiver #darkmagenta
PacketReceiver <|.. UdpReceiver #darkmagenta
PacketReceiver <|.. ReplayLoader #darkmagenta

PacketTransmitter <|.. SerialTransmitter #darkmagenta
PacketTransmitter <|.. UdpTransmitter #darkmagenta

AgentFactory ..> Agent #darkblue;text:darkblue : creates
AgentFactory ..> SSLVision #darkblue
AgentFactory ..> ReplayVision #darkblue
AgentFactory ..> SSLReferee #darkblue
AgentFactory ..> ManualReferee #darkblue
AgentFactory ..> STP #darkblue
AgentFactory ..> ControllerTester #darkblue
AgentFactory ..> RRT #darkblue
AgentFactory ..> LinePath #darkblue
AgentFactory ..> BangBangController #darkblue
AgentFactory ..> ManualController #darkblue
AgentFactory ..> Communicator #darkblue


UIController *-- AgentFactory #darkgreen

Vision -[hidden]- Referee
Referee -[hidden]- Feedback
Feedback -[hidden]- DecisionMaker
DecisionMaker -[hidden]- PathPlanner
PathPlanner -[hidden]- Controller
Controller -[hidden]- Communicator

}


@enduml